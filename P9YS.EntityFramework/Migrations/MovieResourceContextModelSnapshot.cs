// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P9YS.EntityFramework;

namespace P9YS.EntityFramework.Migrations
{
    [DbContext(typeof(MovieResourceContext))]
    partial class MovieResourceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("P9YS.EntityFramework.Models.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("State");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Carousels");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Actor")
                        .HasMaxLength(500);

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Director")
                        .HasMaxLength(200);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Hot");

                    b.Property<long>("HotSum");

                    b.Property<string>("ImgUrl");

                    b.Property<string>("Intro");

                    b.Property<int>("MovieAreaId");

                    b.Property<int>("MovieTime");

                    b.Property<string>("OtherName")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ReleaseDate")
                        .HasMaxLength(50);

                    b.Property<decimal>("Score");

                    b.Property<long>("ScoreCount");

                    b.Property<decimal>("ScoreSum");

                    b.Property<int>("SeriesId");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdTime");

                    b.HasKey("Id");

                    b.HasIndex("MovieAreaId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Other");

                    b.HasKey("Id");

                    b.ToTable("MovieAreas");

                    b.HasData(
                        new { Id = 1, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "中国", Other = 0 },
                        new { Id = 2, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "香港", Other = 0 },
                        new { Id = 3, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "台湾", Other = 0 },
                        new { Id = 4, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "美国", Other = 0 },
                        new { Id = 5, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "英国", Other = 0 },
                        new { Id = 6, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "日本", Other = 0 },
                        new { Id = 7, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "韩国", Other = 0 },
                        new { Id = 8, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "法国", Other = 0 },
                        new { Id = 9, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "印度", Other = 1 },
                        new { Id = 10, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "泰国", Other = 1 },
                        new { Id = 11, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "加拿大", Other = 1 },
                        new { Id = 12, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "澳大利亚", Other = 1 },
                        new { Id = 13, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "俄罗斯", Other = 1 },
                        new { Id = 14, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "伊朗", Other = 1 },
                        new { Id = 15, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "爱尔兰", Other = 1 },
                        new { Id = 16, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "瑞典", Other = 1 },
                        new { Id = 17, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "丹麦", Other = 1 },
                        new { Id = 18, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "巴西", Other = 1 },
                        new { Id = 19, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "墨西哥", Other = 1 },
                        new { Id = 20, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "新西兰", Other = 1 },
                        new { Id = 21, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "新加坡", Other = 1 },
                        new { Id = 22, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "土耳其", Other = 1 },
                        new { Id = 23, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "捷克", Other = 1 },
                        new { Id = 24, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "波兰", Other = 1 },
                        new { Id = 25, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "阿根廷", Other = 1 },
                        new { Id = 26, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "奥地利", Other = 1 },
                        new { Id = 27, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "比利时", Other = 1 },
                        new { Id = 28, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 962, DateTimeKind.Local), Area = "其它", Other = 1 }
                    );
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("MovieId");

                    b.Property<int>("ParentId");

                    b.Property<DateTime>("UpdTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieComments");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieDraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("DoubanHtml");

                    b.Property<string>("DoubanUrl")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("DyUrl")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ImgData");

                    b.Property<string>("Resoures");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("MovieDrafts");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new { Id = 1, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "科幻" },
                        new { Id = 2, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "动作" },
                        new { Id = 3, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "犯罪" },
                        new { Id = 4, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "战争" },
                        new { Id = 5, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "剧情" },
                        new { Id = 6, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "青春" },
                        new { Id = 7, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "爱情" },
                        new { Id = 8, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "烂片" },
                        new { Id = 9, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "文艺" },
                        new { Id = 10, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "喜剧" },
                        new { Id = 11, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "音乐" },
                        new { Id = 12, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "动画" },
                        new { Id = 13, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "童话" },
                        new { Id = 14, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "奇幻" },
                        new { Id = 15, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "史诗" },
                        new { Id = 16, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "家庭" },
                        new { Id = 17, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "暴力" },
                        new { Id = 18, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "恐怖" },
                        new { Id = 19, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "同性" },
                        new { Id = 20, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "悬疑" },
                        new { Id = 21, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "缉毒" },
                        new { Id = 22, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "黑帮" },
                        new { Id = 23, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "卧底" },
                        new { Id = 24, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "枪战" },
                        new { Id = 25, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "宇宙" },
                        new { Id = 26, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "星战" },
                        new { Id = 27, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "武侠" },
                        new { Id = 28, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "纪录" },
                        new { Id = 29, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "监狱" },
                        new { Id = 30, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "历史" },
                        new { Id = 31, AddTime = new DateTime(2019, 3, 8, 21, 41, 11, 965, DateTimeKind.Local), Name = "传记" }
                    );
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieOnlinePlay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieId");

                    b.Property<string>("Price")
                        .HasMaxLength(50);

                    b.Property<string>("Url");

                    b.Property<string>("WebSiteName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieOnlinePlays");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<int>("MovieId");

                    b.Property<int>("OriginType");

                    b.Property<decimal>("Score");

                    b.Property<DateTime>("UpdTime");

                    b.Property<string>("Url")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieOrigins");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<int>("AnswerCount");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("MovieId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieQuestions");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("MovieQuestionId");

                    b.Property<int>("Support");

                    b.Property<DateTime>("UpdTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieQuestionAnswers");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieRecommend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<int>("MovieId");

                    b.Property<int>("Sort");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieRecommends");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("Dub")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MovieId");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Size");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieResources");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieGenreId");

                    b.Property<int>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("MovieGenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieType");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.RatingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<DateTime?>("Mark");

                    b.Property<int>("MovieId");

                    b.Property<decimal>("Score");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("RatingRecords");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.SuportRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<DateTime?>("Mark");

                    b.Property<int>("MovieQuestionAnswerId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieQuestionAnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("SuportRecords");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("LastLoginTime");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("RegisterTime");

                    b.Property<int>("Role");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.Movie", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.MovieArea", "MovieArea")
                        .WithMany()
                        .HasForeignKey("MovieAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieComment", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany("MovieComments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieOnlinePlay", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany("MovieOnlinePlays")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieOrigin", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany("MovieOrigins")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieQuestion", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany("MovieQuestions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieQuestionAnswer", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.MovieQuestion", "MovieQuestion")
                        .WithMany("MovieQuestionAnswers")
                        .HasForeignKey("MovieQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieRecommend", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieResource", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieType", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.MovieGenre", "MovieGenre")
                        .WithMany()
                        .HasForeignKey("MovieGenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.Movie")
                        .WithMany("MovieTypes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.RatingRecord", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.SuportRecord", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.MovieQuestionAnswer", "MovieQuestionAnswer")
                        .WithMany()
                        .HasForeignKey("MovieQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
