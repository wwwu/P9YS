// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P9YS.EntityFramework;

namespace P9YS.EntityFramework.Migrations
{
    [DbContext(typeof(MovieResourceContext))]
    [Migration("20190126091331_Modify_Record")]
    partial class Modify_Record
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("P9YS.EntityFramework.Models.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("State");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Carousels");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Actor")
                        .HasMaxLength(500);

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Director")
                        .HasMaxLength(200);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Hot");

                    b.Property<long>("HotSum");

                    b.Property<string>("ImgUrl");

                    b.Property<string>("Intro");

                    b.Property<int>("MovieAreaId");

                    b.Property<int>("MovieTime");

                    b.Property<string>("OtherName")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ReleaseDate")
                        .HasMaxLength(50);

                    b.Property<decimal>("Score");

                    b.Property<long>("ScoreCount");

                    b.Property<decimal>("ScoreSum");

                    b.Property<int>("SeriesId");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdTime");

                    b.HasKey("Id");

                    b.HasIndex("MovieAreaId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Other");

                    b.HasKey("Id");

                    b.ToTable("MovieAreas");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("MovieId");

                    b.Property<int>("ParentId");

                    b.Property<DateTime>("UpdTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieComments");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieOnlinePlay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieId");

                    b.Property<string>("Price")
                        .HasMaxLength(50);

                    b.Property<string>("Url");

                    b.Property<string>("WebSiteName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieOnlinePlays");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieId");

                    b.Property<int>("OriginType");

                    b.Property<decimal>("Score");

                    b.Property<string>("Url")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieOrigins");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<int>("AnswerCount");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("MovieId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieQuestions");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("MovieQuestionId");

                    b.Property<int>("Support");

                    b.Property<DateTime>("UpdTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieQuestionAnswers");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieRecommend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<int>("MovieId");

                    b.Property<int>("Sort");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieRecommends");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("Dub")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MovieId");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Size");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieResources");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieGenreId");

                    b.Property<int>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("MovieGenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieType");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.RatingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<DateTime?>("Mark");

                    b.Property<int>("MovieId");

                    b.Property<decimal>("Score");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("RatingRecords");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.SuportRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddTime");

                    b.Property<DateTime?>("Mark");

                    b.Property<int>("MovieQuestionAnswerId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MovieQuestionAnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("SuportRecords");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("LastLoginTime");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("RegisterTime");

                    b.Property<int>("Role");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.Movie", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.MovieArea", "MovieArea")
                        .WithMany()
                        .HasForeignKey("MovieAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieComment", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany("MovieComments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieOnlinePlay", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieOrigin", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany("MovieOrigins")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieQuestion", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany("MovieQuestions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieQuestionAnswer", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.MovieQuestion", "MovieQuestion")
                        .WithMany("MovieQuestionAnswers")
                        .HasForeignKey("MovieQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieRecommend", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieResource", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.MovieType", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.MovieGenre", "MovieGenre")
                        .WithMany()
                        .HasForeignKey("MovieGenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.Movie")
                        .WithMany("MovieTypes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.RatingRecord", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("P9YS.EntityFramework.Models.SuportRecord", b =>
                {
                    b.HasOne("P9YS.EntityFramework.Models.MovieQuestionAnswer", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("P9YS.EntityFramework.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
